name: Deploy to Staging

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Staging
    runs-on: [self-hosted]
    environment: staging
    env:
      APP_REPOSITORY_DIR: ~/crmV3

    steps:
      # - name: Configure SSH
      #   run: |
      #     eval $(ssh-agent)
      #     echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/private_key
      #     chmod 600 ~/private_key
      #     ssh-add ~/private_key

      - name: Check if latest image exists
        id: check_latest_image
        run: |
          ssh -v -o StrictHostKeyChecking=no -i ~/private_key ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<'ENDSSH'
          if docker image inspect facturatie-facturatie:latest &> /dev/null; then
            echo "image_exists=true" >> $GITHUB_ENV
          else
            echo "image_exists=false" >> $GITHUB_ENV
          fi
          ENDSSH

      - name: Backup previous state
        if: env.image_exists == 'true'
        run: |
          ssh -v -o StrictHostKeyChecking=no -i ~/private_key ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<'ENDSSH'
          cd ${{ env.APP_REPOSITORY_DIR }}
          docker tag facturatie-facturatie:latest facturatie-facturatie:backup
          ENDSSH

      - name: Deploy new version
        run: |
          ssh -v -o StrictHostKeyChecking=no -i ~/private_key ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<'ENDSSH'
          cd ${{ env.APP_REPOSITORY_DIR }}
          docker compose down
          git checkout main
          git pull
          cat <<EOF > .env
          RABBITMQ_URL=${{ secrets.RABBITMQ_URL }}
          RABBITMQ_USER=${{ secrets.RABBITMQ_USER }}
          RABBITMQ_PASS=${{ secrets.RABBITMQ_PASS }}
          API_KEY=${{ secrets.API_KEY }}
          API_URL=${{ secrets.API_URL }}
          HASH_KEY=${{ secrets.HASH_KEY }}
          EOF
          docker compose up --build -d
          ENDSSH

      - name: Check deployment status
        id: check_status
        run: |
          ssh -v -o StrictHostKeyChecking=no -i ~/private_key ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<'ENDSSH'
          cd ${{ env.APP_REPOSITORY_DIR }}
          if docker compose ps | grep facturatie-facturatie; then
            echo "deployment_success=true" >> $GITHUB_ENV
          else
            echo "deployment_success=false" >> $GITHUB_ENV
          fi
          ENDSSH

      - name: Rollback on failure
        if: env.deployment_success != 'true'
        run: |
          ssh -v -o StrictHostKeyChecking=no -i ~/private_key ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} <<'ENDSSH'
          cd ${{ env.APP_REPOSITORY_DIR }}
          docker compose down
          docker run -d --name restored_container facturatie-facturatie:backup
          docker compose up -d
          ENDSSH
